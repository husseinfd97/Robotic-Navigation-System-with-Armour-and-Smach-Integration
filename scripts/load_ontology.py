#!/usr/bin/env python
"""
.. module:: load_ontology
  :platform: Unix 
  :synopsis: Python module for loading the built map
.. moduleauthor:: Hussein Ahmed Fouad Hassan, S5165612@studenti.unige.it

The primary purpose of this module is to build the raw map which has only "Robot1"
elment with the whole data and object properties.


"""

# Import the armor client class
import time
from armor_client import ArmorClient
import random
import time
import math
import rospy
import rospkg
from armor_api.armor_client import ArmorClient
from std_msgs.msg import Bool
from os.path import dirname, realpath
#import helper



client = ArmorClient("example", "ontoRef") 


# Get the original map and the map which will be generated by this node directions
path = dirname(realpath(__file__))
oldontology = path + "/../maps/topological_map.owl"
new_map = path + "/../maps/new_map.owl"


# Variables for putting diffrent times for setting diffrent vistedAat property for each room   
lower_time = 0.0
upper_time = 1.75


def update_timestamp():
    """
    Update the current time property of the robot.

    """
    res = client.call('QUERY','DATAPROP','IND',['now','Robot1'])
    old = str(helper.get_time(res.queried_objects))
    new = str(math.floor(time.time()))
    client.call('REPLACE','DATAPROP','IND',['now','Robot1','Long',new,old])
    client.call('REASON','','',[''])




def LoadMap():
    """
    Build the empty map with the whole data and object properties needed for the application

    """
    print("Map loading...")
    client = ArmorClient("example", "ontoRef")
    pub = rospy.Publisher('load_map', Bool, queue_size=10)
    rospy.init_node('load_map', anonymous=True)
    pub.publish(0)

    client.call('LOAD','FILE','',[oldontology, 'http://bnc/exp-rob-lab/2022-23', 'true', 'PELLET', 'false'])
    client.manipulation.add_objectprop_to_ind('hasDoor', 'E', 'D6')
    client.manipulation.add_objectprop_to_ind('hasDoor', 'E', 'D7')
    client.manipulation.add_objectprop_to_ind('hasDoor', 'R1', 'D1')
    client.manipulation.add_objectprop_to_ind('hasDoor', 'R2', 'D2')
    client.manipulation.add_objectprop_to_ind('hasDoor', 'R3', 'D3')
    client.manipulation.add_objectprop_to_ind('hasDoor', 'R4', 'D4')
    client.manipulation.add_objectprop_to_ind('hasDoor', 'C1', 'D1')
    client.manipulation.add_objectprop_to_ind('hasDoor', 'C1', 'D2')
    client.manipulation.add_objectprop_to_ind('hasDoor', 'C1', 'D5')
    client.manipulation.add_objectprop_to_ind('hasDoor', 'C1', 'D6')
    client.manipulation.add_objectprop_to_ind('hasDoor', 'C2', 'D3')
    client.manipulation.add_objectprop_to_ind('hasDoor', 'C2', 'D4')
    client.manipulation.add_objectprop_to_ind('hasDoor', 'C2', 'D5')
    client.manipulation.add_objectprop_to_ind('hasDoor', 'C2', 'D7')
    print("added hasDoor properties")
    entities = ['R1', 'R2', 'R3', 'R4', 'E', 'C1', 'C2', 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7']
    

    for entity in entities:
        client.call('DISJOINT', 'IND', '', [entity])

    client.call('REASON','','',[''])
    print("All disjointed")

    #Adding the visitedAt property for each room 
    client.manipulation.add_dataprop_to_ind('visitedAt', 'R2', 'Long', str(math.floor(time.time())))
    rospy.sleep(random.uniform(lower_time, upper_time))
    client.manipulation.add_dataprop_to_ind('visitedAt', 'R4', 'Long', str(math.floor(time.time())))
    rospy.sleep(random.uniform(lower_time, upper_time))
    client.manipulation.add_dataprop_to_ind('visitedAt', 'R1', 'Long', str(math.floor(time.time())))
    rospy.sleep(random.uniform(lower_time, upper_time))
    client.manipulation.add_dataprop_to_ind('visitedAt', 'R3', 'Long', str(math.floor(time.time())))
    rospy.sleep(random.uniform(lower_time, upper_time))
    print("Added visitedAt properties")


    # Move the robot to the charging room
    client.call('REASON','','',[''])
    client.manipulation.add_objectprop_to_ind('isIn', 'Robot1', 'E')
    # updating now property for the robot 
    update_timestamp()
    
    client.call('SAVE','','',[new_map])
    pub.publish(1)
    print("map loaded")
    rospy.sleep(3)
   

   
if __name__ == '__main__':
   try:
      LoadMap()
   except rospy.ROSInterruptException:
      pass 



